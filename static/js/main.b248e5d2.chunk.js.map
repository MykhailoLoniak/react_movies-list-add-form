{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","htmlFor","type","classNames","event","target","onBlur","NewMovie","onAdd","count","isFormValid","setIsFormValid","setMovie","inputError","setInputError","validateForm","isValid","Object","entries","every","key","trim","handleFieldChange","fieldName","newValue","prevState","onSubmit","preventDefault","pre","disabled","App","moviesFromServer","newMovie","setNewMovie","handleAddMovie","ReactDOM","render","document","getElementById"],"mappings":"0uEAQaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,sBAAKC,UAAU,OAAO,UAAQ,aAA9B,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,gBAAlB,SACE,qBACEC,IAAKF,EAAMG,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAb,SAA2BD,EAAMK,aAIrC,sBAAKJ,UAAU,UAAf,UACGD,EAAMM,YACP,uBACA,mBAAGC,KAAMP,EAAMQ,QAAf,0BA5BkC,ECE7BC,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACzC,qBAAKT,UAAU,SAAf,SACGS,EAAOC,KAAI,SAAAX,GAAK,OACf,cAAC,EAAD,CAEEA,MAAOA,GADFA,EAAMY,OAFE,KAFsB,E,+BCQpC,IAAMC,EAA6B,SAAC,GAOpC,IANLC,EAMI,EANJA,KACAC,EAKI,EALJA,MAKI,IAJJC,aAII,MAJIF,EAIJ,MAHJG,mBAGI,sBAHmBD,GAGnB,MAFJE,gBAEI,aADJC,gBACI,MADO,WAAS,EAChB,EAEJ,EAAaC,oBAAS,2BAASN,EAAT,YAdfO,KAAKC,SACTC,QAAQ,IACRC,MAAM,GAYa,IAAfC,EAAP,oBAGA,EAA8BL,oBAAS,GAAvC,mBAAOM,EAAP,KAAgBC,EAAhB,KACMC,EAAWF,GAAWR,IAAaH,EAEzC,OACE,sBAAKd,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQ4B,QAASJ,EAAlC,SACGT,IAGH,qBAAKf,UAAU,UAAf,SACE,uBACE6B,KAAK,OACLL,GAAIA,EACJ,0BAAkBX,GAClBb,UAAW8B,IAAW,QAAS,CAC7B,YAAaH,IAEfX,YAAaA,EACbF,MAAOA,EACPI,SAAU,SAAAa,GAAK,OAAIb,EAASa,EAAMC,OAAOlB,MAA1B,EACfmB,OAAQ,kBAAMP,GAAW,EAAjB,MAIXC,GACC,mBAAG3B,UAAU,iBAAb,mBAAkCe,EAAlC,oBAIP,ECvDYmB,EAAW,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,MACzB,EAAgBhB,mBAAS,GAAlBiB,EAAP,oBACA,EAAsCjB,oBAAS,GAA/C,mBAAOkB,EAAP,KAAoBC,EAApB,KACA,EAA0BnB,mBAAS,CACjCf,MAAO,GACPC,YAAa,GACbH,OAAQ,GACRK,QAAS,GACTI,OAAQ,KALV,mBAAOZ,EAAP,KAAcwC,EAAd,KAQA,EAAoCpB,mBAAS,CAC3Cf,OAAO,EACPF,QAAQ,EACRK,SAAS,EACTI,QAAQ,IAJV,mBAAO6B,EAAP,KAAmBC,EAAnB,KAOMC,EAAe,WACnB,IAAMC,EAAUC,OAAOC,QAAQ9C,GAAO+C,OAAM,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXjC,EAAW,KAE5D,MAAe,gBAARiC,GAA0BjC,GAA0B,KAAjBA,EAAMkC,MACjD,IAEDV,EAAeK,EAChB,EAEKM,EAAoB,SAACC,EAAmBC,GAC5CZ,GAAS,SAAAa,GAAS,kCACbA,GADa,kBAEfF,EAAYC,GAFG,IAKlBT,GACD,EAkDD,OACE,uBACE1C,UAAU,WAEVqD,SAnCiB,SAACtB,GACpBA,EAAMuB,iBACNZ,IAEK3C,EAAMK,OACTqC,GAAc,SAAAc,GAAG,kCAAUA,GAAV,IAAenD,OAAO,GAAtB,IAGdL,EAAMG,QACTuC,GAAc,SAAAc,GAAG,kCAAUA,GAAV,IAAerD,QAAQ,GAAvB,IAGdH,EAAMQ,SACTkC,GAAc,SAAAc,GAAG,kCAAUA,GAAV,IAAehD,SAAS,GAAxB,IAGdR,EAAMY,QACT8B,GAAc,SAAAc,GAAG,kCAAUA,GAAV,IAAe5C,QAAQ,GAAvB,MAGf6B,EAAWpC,OACToC,EAAWtC,QACXsC,EAAWjC,SACXiC,EAAW7B,UAIjBwB,EAAMpC,GA3CNwC,EAAS,CACPnC,MAAO,GACPC,YAAa,GACbH,OAAQ,GACRK,QAAS,GACTI,OAAQ,KAGV8B,EAAc,CACZrC,OAAO,EACPF,QAAQ,EACRK,SAAS,EACTI,QAAQ,IAiCX,EAGC,UAKE,oBAAIX,UAAU,QAAd,yBAEA,cAAC,EAAD,CACEa,KAAK,QACLE,MAAM,QACND,MAAOf,EAAMK,MACbc,SAAU,SAACJ,GAAD,OAAWmC,EAAkB,QAASnC,EAAtC,EACVG,UAAQ,IAETuB,EAAWpC,OACV,mBAAGJ,UAAU,iBAAb,+BAGF,cAAC,EAAD,CACEa,KAAK,cACLE,MAAM,cACND,MAAOf,EAAMM,YACba,SAAU,SAACJ,GAAD,OAAWmC,EAAkB,cAAenC,EAA5C,IAMZ,cAAC,EAAD,CACED,KAAK,SACLE,MAAM,YACND,MAAOf,EAAMG,OACbgB,SAAU,SAACJ,GAAD,OAAWmC,EAAkB,SAAUnC,EAAvC,EACVG,UAAQ,IAETuB,EAAWtC,QACV,mBAAGF,UAAU,iBAAb,mCAGF,cAAC,EAAD,CACEa,KAAK,UACLE,MAAM,WACND,MAAOf,EAAMQ,QACbW,SAAU,SAACJ,GAAD,OAAWmC,EAAkB,UAAWnC,EAAxC,EACVG,UAAQ,IAETuB,EAAWjC,SACV,mBAAGP,UAAU,iBAAb,kCAGF,cAAC,EAAD,CACEa,KAAK,SACLE,MAAM,UACND,MAAOf,EAAMY,OACbO,SAAU,SAACJ,GAAD,OAAWmC,EAAkB,SAAUnC,EAAvC,EACVG,UAAQ,IAETuB,EAAW7B,QACV,mBAAGX,UAAU,iBAAb,iCAGF,qBAAKA,UAAU,mBAAf,SACE,qBAAKA,UAAU,UAAf,SACE,wBACE6B,KAAK,SACL,UAAQ,gBACR7B,UAAU,iBACVwD,UAAWnB,EAJb,uBA7DCD,EAyEV,E,QC7JYqB,EAAM,WACjB,MAAgCtC,mBAAS,YAAIuC,IAA7C,mBAAOC,EAAP,KAAiBC,EAAjB,KAMA,OACE,sBAAK5D,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYS,OAAQkD,MAEtB,qBAAK3D,UAAU,UAAf,SACE,cAAC,EAAD,CAAUmC,MAAO,SAACpC,GAAD,OAVvB,SAAwBA,GACtB6D,EAAY,GAAD,mBAAKD,GAAL,CAAe5D,IAC3B,CAQiC8D,CAAe9D,EAA1B,QAIxB,ECpBD+D,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,Q","file":"static/js/main.b248e5d2.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => { },\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\nexport const NewMovie = ({ onAdd }: { onAdd: (movie: Movie) => void }) => {\n  const [count] = useState(0);\n  const [isFormValid, setIsFormValid] = useState(false);\n  const [movie, setMovie] = useState({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n\n  const [inputError, setInputError] = useState({\n    title: false,\n    imgUrl: false,\n    imdbUrl: false,\n    imdbId: false,\n  });\n\n  const validateForm = () => {\n    const isValid = Object.entries(movie).every(([key, value]) => {\n      // Якщо ключ - 'description', то дозволити пусте значення\n      return key === 'description' || (value && value.trim() !== '');\n    });\n\n    setIsFormValid(isValid);\n  };\n\n  const handleFieldChange = (fieldName: string, newValue: string) => {\n    setMovie(prevState => ({\n      ...prevState,\n      [fieldName]: newValue,\n    }));\n\n    validateForm();\n  };\n\n  const reset = () => {\n    setMovie({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n\n    setInputError({\n      title: false,\n      imgUrl: false,\n      imdbUrl: false,\n      imdbId: false,\n    });\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    validateForm();\n\n    if (!movie.title) {\n      setInputError(pre => ({ ...pre, title: true }));\n    }\n\n    if (!movie.imgUrl) {\n      setInputError(pre => ({ ...pre, imgUrl: true }));\n    }\n\n    if (!movie.imdbUrl) {\n      setInputError(pre => ({ ...pre, imdbUrl: true }));\n    }\n\n    if (!movie.imdbId) {\n      setInputError(pre => ({ ...pre, imdbId: true }));\n    }\n\n    if (inputError.title\n      && !inputError.imgUrl\n      && !inputError.imdbUrl\n      && !inputError.imdbId) {\n      return;\n    }\n\n    onAdd(movie);\n    reset();\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={movie.title}\n        onChange={(value) => handleFieldChange('title', value)}\n        required\n      />\n      {inputError.title && (\n        <p className=\"help is-danger\">Title is required</p>\n      )}\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={movie.description}\n        onChange={(value) => handleFieldChange('description', value)}\n      />\n      {/* {inputError.description && (\n        <p className=\"help is-danger\">Description is required</p>\n      )} */}\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={movie.imgUrl}\n        onChange={(value) => handleFieldChange('imgUrl', value)}\n        required\n      />\n      {inputError.imgUrl && (\n        <p className=\"help is-danger\">Image URL is required</p>\n      )}\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={movie.imdbUrl}\n        onChange={(value) => handleFieldChange('imdbUrl', value)}\n        required\n      />\n      {inputError.imdbUrl && (\n        <p className=\"help is-danger\">Imdb URL is required</p>\n      )}\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={movie.imdbId}\n        onChange={(value) => handleFieldChange('imdbId', value)}\n        required\n      />\n      {inputError.imdbId && (\n        <p className=\"help is-danger\">Imdb ID is required</p>\n      )}\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isFormValid}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [newMovie, setNewMovie] = useState([...moviesFromServer]);\n\n  function handleAddMovie(movie: Movie) {\n    setNewMovie([...newMovie, movie]);\n  }\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={newMovie} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={(movie) => handleAddMovie(movie)} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}